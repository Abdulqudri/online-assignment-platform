<div class="plagiarism-container">
    <h1>Manage Plagiarism</h1>

    <div class="filter">
        <input type="text" id="student-name" placeholder="Search by Student Name">
        <select id="plagiarism-threshold">
            <option value="">Filter by Plagiarism Score</option>
            <option value="50">Above 50%</option>
            <option value="75">Above 75%</option>
            <option value="90">Above 90%</option>
        </select>
        <button onclick="applyFilter()">Apply Filter</button>
    </div>

    <table>
        <thead>
            <tr>
                <th>Assignment ID</th>
                <th>Student Name</th>
                <th>Plagiarism Score (%)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="plagiarism-data">
            <!-- Dynamic rows will be inserted here -->
        </tbody>
    </table>
</div>

<script>
    const plagiarismTable = document.getElementById('plagiarism-data');

    // Function to fetch and display data
    async function loadPlagiarismData(filters = {}) {
        try {
            const queryParams = new URLSearchParams(filters).toString();
            const response = await fetch(`/assignments/filter?${queryParams}`);
            const data = await response.json();

            plagiarismTable.innerHTML = ''; // Clear existing data
            data.forEach(item => {
                const row = document.createElement('tr');

                row.innerHTML = `
                    <td>${item.submittedBy.userId}</td>
                    <td>${item.submittedBy.name || 'Unknown'}</td>
                    <td>${item.plagiarismScore }</td>
                    <td class="action-buttons">
                        <button onclick="flagAssignment('${item._id}')">Flag</button>
                        <button onclick="runPlagiarismCheck('${item._id}')">Run Check</button>
                    </td>
                `;

                plagiarismTable.appendChild(row);
            });
        } catch (error) {
            console.error('Error loading data:', error);
        }
    }

    // Function to apply filters
    function applyFilter() {
        const nameFilter = document.getElementById('student-name').value;
        const scoreFilter = document.getElementById('plagiarism-threshold').value;

        const filters = {};
        if (nameFilter) filters.studentName = nameFilter;
        if (scoreFilter) filters.plagiarismThreshold = scoreFilter;

        loadPlagiarismData(filters);
    }

    // Function to review an assignment
    

    // Function to flag an assignment
    async function flagAssignment(id) {
        try {
            const response = await fetch(`/assignments/${id}/flag`, {
                method: 'POST',
            });

            const result = await response.json();
            alert(result.message);
            loadPlagiarismData(); // Refresh the data
        } catch (error) {
            console.error('Error flagging assignment:', error);
        }
    }

    // Function to run a plagiarism check
    async function runPlagiarismCheck(id) {
        try {
            const response = await fetch(`/assignments/${id}/plagiarism-check`, {
                method: 'POST',
            });

            const result = await response.json();
            alert(`Plagiarism check completed. Score: ${result.data}%`);
            loadPlagiarismData(); // Refresh the data
        } catch (error) {
            console.error('Error running plagiarism check:', error);
        }
    }

    // Load data on page load
    loadPlagiarismData();
</script>
